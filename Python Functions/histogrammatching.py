# -*- coding: utf-8 -*-
"""HistogramMatching.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cjsLMH7JdGil3mwP4mv5KabR4STby0ru
"""

from skimage.io import imread,imsave
from skimage.exposure import cumulative_distribution
import numpy as np
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

style_img_path="/content/drive/MyDrive/Images/Starry-Night-canvas-Vincent-van-Gogh-New-1889.jpeg"
content_img_path="/content/drive/MyDrive/Images/Tuebingen_Neckarfront.jpg"

# read/load the input and template image
image = (imread(style_img_path, as_gray=True)*255).astype(np.uint8)
imageTemplate = (imread(content_img_path, as_gray=True)*255).astype(np.uint8)

plt.figure(figsize=(8,6))
plt.subplot(1,2,1)
plt.title('Input Image')
plt.imshow(image, cmap='gray')
plt.axis('off')
plt.subplot(1,2,2)
plt.title('Template Image')
plt.imshow(imageTemplate, cmap='gray')
plt.axis('off')
plt.show()

pixels = np.arange(256)
pixels

# get the CDF
def getCDF(image):
    cdf, bins = cumulative_distribution(image)
    cdf = np.insert(cdf, 0, [0]*bins[0])
    cdf = np.append(cdf, [1]*(255-bins[-1]))
    return cdf

# histogram matching
def histMatch(cdfInput, cdfTemplate, imageInput):
    pixelValues = np.arange(256)
    new_pixels = np.interp(cdfInput, cdfTemplate, pixels)
    imageMatch = (np.reshape(new_pixels[imageInput.ravel()], imageInput.shape)).astype(np.uint8)
    return imageMatch

# Preview the result
def plotResult(imInput, imTemplate, imResult):
    plt.figure(figsize=(10,7))
    plt.subplot(1,3,1)
    plt.title('Input Image')
    plt.imshow(imInput)
    plt.axis('off')
    plt.subplot(1,3,2)
    plt.title('Template Image')
    plt.imshow(imTemplate)
    plt.axis('off')
    plt.subplot(1,3,3)
    plt.title('Result')
    plt.imshow(imResult)
    plt.axis('off')
    plt.show()

# read/load the input and template image
image = imread(style_img_path).astype(np.uint8)
imageTemplate = imread(content_img_path).astype(np.uint8)

# create a matrix for result
imageResult = np.zeros((image.shape)).astype(np.uint8)

# cdf and histogram
for channel in range(3):
    cdfInput = getCDF(image[:,:,channel])
    cdfTemplate = getCDF(imageTemplate[:,:,channel])
    imageResult[:,:,channel] = histMatch(cdfInput, cdfTemplate, image[:,:,channel])

# plot
plotResult(image, imageTemplate, imageResult)

imsave("histogramMatch.jpeg", imageResult)